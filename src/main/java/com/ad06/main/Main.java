/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ad06.main;

import com.ad06.util.HTMLEditorKitCustom;
import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.List;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import org.bson.BsonDocument;
import org.bson.conversions.Bson;

/**
 *
 * @author Manuel
 */
public final class Main extends javax.swing.JFrame implements HyperlinkListener, WindowListener {

    private static final int ALLTWEETS = 1;
    private static final int FOLLOWSTWEETS = 2;
    public static final int USERTWEETS = 3;
    private static final int HASHTAGSEARCH = 4;

    private int currentDisplay;

    private final Login login;

    private boolean enteredLink;
    private String userLink;
    private String user;
    private String searchUser;
    private String searchHashTag;
    private List<String> follows;
    private int page, totalPages;

    /**
     * Creates new form Main
     *
     * @param parent
     * @param modal
     * @param user
     */
    public Main(java.awt.Frame parent, String user) {

        this.setLocation(parent.getLocation());
        this.login = (Login) parent;
        this.user = user;

        this.follows = getFollows();
        System.out.println("A los que sigue son " + follows);

        initComponents();

        this.currentDisplay = Main.ALLTWEETS;

        setPages();

        updatePageButtons();

        jEditorPane1.setEditable(false);

        this.jEditorPane1.setEditorKit(new HTMLEditorKitCustom());

        updateAll();

        jEditorPane1.addHyperlinkListener(this);

        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jButtonNextPage = new javax.swing.JButton();
        jButtonPreviousPage = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuMensajes = new javax.swing.JMenu();
        jMenuItemVerTodosMensajes = new javax.swing.JMenuItem();
        jMenuItemVerMensajesDeLosQueSigo = new javax.swing.JMenuItem();
        jMenuItemRedactarMensaje = new javax.swing.JMenuItem();
        jMenuItemSalir = new javax.swing.JMenuItem();
        jMenuBuscar = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jEditorPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jEditorPane1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jEditorPane1);

        jButtonNextPage.setText(">>");
        jButtonNextPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextPageActionPerformed(evt);
            }
        });

        jButtonPreviousPage.setText("<<");
        jButtonPreviousPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPreviousPageActionPerformed(evt);
            }
        });

        jMenuMensajes.setText("Mensajes");

        jMenuItemVerTodosMensajes.setText("Ver todos los mensajes");
        jMenuItemVerTodosMensajes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemVerTodosMensajesActionPerformed(evt);
            }
        });
        jMenuMensajes.add(jMenuItemVerTodosMensajes);

        jMenuItemVerMensajesDeLosQueSigo.setText("Ver los mensajes de las personas que sigo");
        jMenuItemVerMensajesDeLosQueSigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemVerMensajesDeLosQueSigoActionPerformed(evt);
            }
        });
        jMenuMensajes.add(jMenuItemVerMensajesDeLosQueSigo);

        jMenuItemRedactarMensaje.setText("Redactar un mensaje");
        jMenuItemRedactarMensaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRedactarMensajeActionPerformed(evt);
            }
        });
        jMenuMensajes.add(jMenuItemRedactarMensaje);

        jMenuItemSalir.setText("Salir");
        jMenuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalirActionPerformed(evt);
            }
        });
        jMenuMensajes.add(jMenuItemSalir);

        jMenuBar1.add(jMenuMensajes);

        jMenuBuscar.setText("Buscar");

        jMenuItem1.setText("Buscar persona");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuBuscar.add(jMenuItem1);

        jMenuItem2.setText("Buscar #hashtag");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenuBuscar.add(jMenuItem2);

        jMenuBar1.add(jMenuBuscar);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(132, Short.MAX_VALUE)
                .addComponent(jButtonPreviousPage, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonNextPage, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(133, 133, 133))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNextPage)
                    .addComponent(jButtonPreviousPage))
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPreviousPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPreviousPageActionPerformed
        // TODO add your handling code here:
        page--;
        updateTweets();
        updatePageButtons();
        System.out.println(page);
    }//GEN-LAST:event_jButtonPreviousPageActionPerformed

    private void jEditorPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jEditorPane1MouseClicked
        // TODO add your handling code here:
        if (enteredLink) {
            System.out.println("se clicado en el enlace " + userLink);
            
            int option = JOptionPane.showConfirmDialog(this, "Desea seguir al usuario " + userLink, "Confirmaci√≥n", JOptionPane.OK_CANCEL_OPTION);
            
            if (option == JOptionPane.OK_OPTION) {
                insertFollows(userLink);
            }
            
            
        } else {
            System.out.println("NO se clicado en el enlace");

        }
    }//GEN-LAST:event_jEditorPane1MouseClicked

    private void jMenuItemRedactarMensajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRedactarMensajeActionPerformed
        // TODO add your handling code here:
        NewTweet newTweet = new NewTweet(this, true);
        newTweet.setVisible(true);
    }//GEN-LAST:event_jMenuItemRedactarMensajeActionPerformed

    private void jMenuItemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalirActionPerformed
        // TODO add your handling code here:
        login.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItemSalirActionPerformed

    private void jMenuItemVerTodosMensajesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemVerTodosMensajesActionPerformed
        page = 1;
        currentDisplay = Main.ALLTWEETS;
        updateAll();

    }//GEN-LAST:event_jMenuItemVerTodosMensajesActionPerformed

    private void jButtonNextPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextPageActionPerformed
        // TODO add your handling code here:
        page++;
        updateTweets();
        updatePageButtons();
        System.out.println(page);

    }//GEN-LAST:event_jButtonNextPageActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        SearchUser searchUserGUI = new SearchUser(this, true);
        searchUserGUI.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItemVerMensajesDeLosQueSigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemVerMensajesDeLosQueSigoActionPerformed
        // TODO add your handling code here:
        currentDisplay = Main.FOLLOWSTWEETS;
        updateAll();
    }//GEN-LAST:event_jMenuItemVerMensajesDeLosQueSigoActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        String hashtag = JOptionPane.showInputDialog(this, "Introdizca el hashtag a buscar", "Buscar hashtag", JOptionPane.OK_CANCEL_OPTION);

        if (hashtag != null) {
            currentDisplay = Main.HASHTAGSEARCH;
            searchHashTag = hashtag;
            updateAll();
        }


    }//GEN-LAST:event_jMenuItem2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonNextPage;
    private javax.swing.JButton jButtonPreviousPage;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuBuscar;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItemRedactarMensaje;
    private javax.swing.JMenuItem jMenuItemSalir;
    private javax.swing.JMenuItem jMenuItemVerMensajesDeLosQueSigo;
    private javax.swing.JMenuItem jMenuItemVerTodosMensajes;
    private javax.swing.JMenu jMenuMensajes;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private String getAllTweets() {

        StringBuilder html = new StringBuilder();

        html.append("<!DOCTYPE html>\n"
                + "<html>\n"
                + "\n"
                + "<body style=\"background-color: #e6f3ff; padding-left: 10px; padding: 10px;\">");

        DBCollection colMensaje = this.login.getApp().getDatabase().getCollection("mensaje");

        try (DBCursor cursor = colMensaje.find().sort(new BasicDBObject().append("date", -1)).skip((page - 1) * 5).limit(5)) {

            while (cursor.hasNext()) {
                DBObject documento = cursor.next();
                DBObject userObject = (DBObject) documento.get("user");
                html.append(tweetBuilder(
                        userObject.get("nome").toString(),
                        userObject.get("username").toString(),
                        documento.get("text").toString(),
                        documento.get("date").toString()));

            }
        }

        html.append("</body>\n"
                + "</html>");
        return html.toString();
    }

    private String getFollowsTweets() {

        StringBuilder html = new StringBuilder();

        html.append("<!DOCTYPE html>\n"
                + "<html>\n"
                + "\n"
                + "<body style=\"background-color: #e6f3ff; padding-left: 10px; padding: 10px;\">");

        DBCollection colMensaje = this.login.getApp().getDatabase().getCollection("mensaje");

        Bson filter = Filters.in("user.username", follows);

        DBObject query = new BasicDBObject(filter.toBsonDocument(BsonDocument.class, MongoClient.getDefaultCodecRegistry()));

        try (DBCursor cursor = colMensaje.find(query).sort(new BasicDBObject().append("date", -1)).skip((page - 1) * 5).limit(5)) {

            while (cursor.hasNext()) {
                DBObject documento = cursor.next();
                DBObject userObject = (DBObject) documento.get("user");
                html.append(tweetBuilder(
                        userObject.get("nome").toString(),
                        userObject.get("username").toString(),
                        documento.get("text").toString(),
                        documento.get("date").toString()));

            }
        }

        html.append("</body>\n"
                + "</html>");

        return html.toString();

    }

    private String getUserTweets(String user) {

        StringBuilder html = new StringBuilder();

        html.append("<!DOCTYPE html>\n"
                + "<html>\n"
                + "\n"
                + "<body style=\"background-color: #e6f3ff; padding-left: 10px; padding: 10px;\">");

        DBCollection colMensaje = this.login.getApp().getDatabase().getCollection("mensaje");

        Bson filter = Filters.eq("user.username", user);

        DBObject query = new BasicDBObject(filter.toBsonDocument(BsonDocument.class, MongoClient.getDefaultCodecRegistry()));

        try (DBCursor cursor = colMensaje.find(query).sort(new BasicDBObject().append("date", -1)).skip((page - 1) * 5).limit(5)) {

            while (cursor.hasNext()) {
                DBObject documento = cursor.next();
                DBObject userObject = (DBObject) documento.get("user");
                html.append(tweetBuilder(
                        userObject.get("nome").toString(),
                        userObject.get("username").toString(),
                        documento.get("text").toString(),
                        documento.get("date").toString()));

            }
        }

        html.append("</body>\n"
                + "</html>");
        return html.toString();
    }

    private String getHashtagTweets(String searchHashTag) {

        StringBuilder html = new StringBuilder();

        html.append("<!DOCTYPE html>\n"
                + "<html>\n"
                + "\n"
                + "<body style=\"background-color: #e6f3ff; padding-left: 10px; padding: 10px;\">");

        DBCollection colMensaje = this.login.getApp().getDatabase().getCollection("mensaje");

        Bson filter = Filters.eq("hashtags", searchHashTag);

        DBObject query = new BasicDBObject(filter.toBsonDocument(BsonDocument.class, MongoClient.getDefaultCodecRegistry()));

        try (DBCursor cursor = colMensaje.find(query).sort(new BasicDBObject().append("date", -1)).skip((page - 1) * 5).limit(5)) {

            while (cursor.hasNext()) {
                DBObject documento = cursor.next();
                DBObject userObject = (DBObject) documento.get("user");
                html.append(tweetBuilder(
                        userObject.get("nome").toString(),
                        userObject.get("username").toString(),
                        documento.get("text").toString(),
                        documento.get("date").toString()));

            }
        }

        html.append("</body>\n"
                + "</html>");

        return html.toString();
    }

    private String tweetBuilder(String name, String username, String text, String date) {
        return "<p style=\"font-size: 12px; font-weight: bold; font-family: georgia;\">" + name + " " + "<a href=\"@" + username + "\">@" + username + "</a>"
                + "</p>"
                + "<p>&nbsp;"
                + "</p>"
                + "<p style=\"font-size: 12px; font-family: georgia;\">" + text
                + "</p>"
                + "<p style=\"text-align: right; color: #708090;\">" + date + " CET"
                + "</p>"
                + "<p>&nbsp;"
                + "</p>"
                + "<p>&nbsp;"
                + "</p>";

    }

    void updateTweets() {
        switch (currentDisplay) {
            case Main.ALLTWEETS:
                this.jEditorPane1.setText(getAllTweets());
                break;
            case Main.FOLLOWSTWEETS:
                this.jEditorPane1.setText(getFollowsTweets());
                break;
            case Main.USERTWEETS:
                this.jEditorPane1.setText(getUserTweets(searchUser));
                break;
            case Main.HASHTAGSEARCH:
                this.jEditorPane1.setText(getHashtagTweets(searchHashTag));
            default:
                break;
        }

    }

    private void setPages() {

        switch (currentDisplay) {
            case Main.ALLTWEETS: {
                DBCollection colMensaje = this.login.getApp().getDatabase().getCollection("mensaje");
                try (DBCursor cursor = colMensaje.find()) {
                    totalPages = (int) ((cursor.count() - 1) / 5) + 1;
                    System.out.println("El total de tweets es " + cursor.count() + " y el total de p√°ginas es " + totalPages);
                    page = 1;
                }
                break;
            }
            case Main.FOLLOWSTWEETS: {
                DBCollection colMensaje = this.login.getApp().getDatabase().getCollection("mensaje");
                Bson filter = Filters.in("user.username", follows);
                DBObject query = new BasicDBObject(filter.toBsonDocument(BsonDocument.class, MongoClient.getDefaultCodecRegistry()));
                try (DBCursor cursor = colMensaje.find(query)) {
                    totalPages = (int) ((cursor.count() - 1) / 5) + 1;
                    System.out.println("El total de tweets de los que sigues es " + cursor.count() + " y el total de p√°ginas es " + totalPages);
                    page = 1;
                }
                break;
            }
            case Main.USERTWEETS: {
                DBCollection colMensaje = this.login.getApp().getDatabase().getCollection("mensaje");
                Bson filter = Filters.eq("user.username", user);
                DBObject query = new BasicDBObject(filter.toBsonDocument(BsonDocument.class, MongoClient.getDefaultCodecRegistry()));
                try (DBCursor cursor = colMensaje.find(query)) {
                    totalPages = (int) ((cursor.count() - 1) / 5) + 1;
                    System.out.println("El total de tweets el un usuario es " + cursor.count() + " y el total de p√°ginas es " + totalPages);
                    page = 1;
                }
            }
            case Main.HASHTAGSEARCH: {
                DBCollection colMensaje = this.login.getApp().getDatabase().getCollection("mensaje");
                Bson filter = Filters.eq("hashtags", this.searchHashTag);
                DBObject query = new BasicDBObject(filter.toBsonDocument(BsonDocument.class, MongoClient.getDefaultCodecRegistry()));
                try (DBCursor cursor = colMensaje.find(query)) {
                    totalPages = (int) ((cursor.count() - 1) / 5) + 1;
                    System.out.println("El total de tweets con un hashtag es " + cursor.count() + " y el total de p√°ginas es " + totalPages);
                    page = 1;
                }

            }
            break;
            default:
                break;
        }

    }

    void updatePageButtons() {
        if (page == 1) {
            this.jButtonPreviousPage.setEnabled(false);
        } else {
            this.jButtonPreviousPage.setEnabled(true);
        }

        if (page == totalPages) {
            this.jButtonNextPage.setEnabled(false);
        } else {
            this.jButtonNextPage.setEnabled(true);
        }

    }

    public void updateAll() {

        setPages();
        updateTweets();
        updatePageButtons();
    }

    @Override
    public void hyperlinkUpdate(HyperlinkEvent e) {
        JEditorPane pane = (JEditorPane) e.getSource();
        userLink = e.getDescription();
        if (e.getEventType() == HyperlinkEvent.EventType.ENTERED) {
            enteredLink = true;
        } else if (e.getEventType() == HyperlinkEvent.EventType.EXITED) {
            enteredLink = false;
        }
    }

    private List<String> getFollows() {

        DBCollection colUsuario = login.getApp().getDatabase().getCollection("usuario");

        DBObject query = new BasicDBObject("username", user);

        DBObject document = colUsuario.findOne(query);

        return follows = (List<String>) document.get("follows");

    }
    
    private void insertFollows(String userLink) {
        
        DBCollection colUsuario = login.getApp().getDatabase().getCollection("usuario");
        
        Bson filterUp = Filters.eq("username", user);
        DBObject queryUp = new BasicDBObject(filterUp.toBsonDocument(BsonDocument.class, MongoClient.getDefaultCodecRegistry()));

        Bson updateAux = Updates.addToSet("follows", userLink.replace("@", ""));
        DBObject update = new BasicDBObject(updateAux.toBsonDocument(BsonDocument.class, MongoClient.getDefaultCodecRegistry()));

        colUsuario.update(queryUp, update);
        
    }
    

    @Override
    public void windowOpened(WindowEvent e) {

    }

    @Override
    public void windowClosing(WindowEvent e) {
        login.setVisible(true);
        this.dispose();
    }

    @Override
    public void windowClosed(WindowEvent e) {
    }

    @Override
    public void windowIconified(WindowEvent e) {
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
    }

    @Override
    public void windowActivated(WindowEvent e) {
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
    }

    public Login getLogin() {
        return login;
    }

    public String getUser() {
        return user;
    }

    public void setSearchUser(String searchUser) {
        this.searchUser = searchUser;
    }

    public void setCurrentDisplay(int currentDisplay) {
        this.currentDisplay = currentDisplay;
    }

    

}
